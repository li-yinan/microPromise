
var Deferred=function(){if(!this instanceof Deferred){return new Deferred();}
var successCallbacks=[];var failCallbacks=[];var finalData=[];var errorMsg='';var status={pendding:1,resolved:2,rejected:3};var state=status.pendding;function handleResolve(){var _this=this;for(var i=0;i<successCallbacks.length;i++){(function(i){if(finalData&&finalData[0]&&finalData[0].then){finalData[0].then(function(){successCallbacks[i].apply(_this,arguments);});}
else{setTimeout(function(){successCallbacks[i].apply(_this,finalData);},0);}})(i)}}
function handleResolveWith(){var _this=this;for(var i=0;i<successCallbacks.length;i++){var callback=successCallbacks[i];setTimeout(function(){callback.apply(_this,finalData);},0);}}
function handleReject(){var _this=this;for(var i=0;i<failCallbacks.length;i++){var callback=failCallbacks[i];setTimeout(function(){callback.apply(_this,finalData);},0);}}
function then(successCallback,failCallback){var deferred=Deferred();if(state===status.resolved){var _this=this;setTimeout(function(){successCallback.apply(_this,finalData);},0);}
else if(state===status.reject){var _this=this;setTimeout(function(){failCallback.call(_this,errorMsg);},0);}
else{if(successCallback){successCallbacks.push(function(){deferred.resolve(successCallback.apply(_this,arguments));});}
if(failCallback){failCallbacks.push(function(errMsg){failCallback(errMsg);deferred.reject();});}}
return deferred.promise();}
var deferred={resolve:function(){var data=Array.prototype.slice.call(arguments,0);if(state===status.pendding){finalData=data;state=status.resolved;handleResolve.call(this);}},reject:function(errMsg){if(state===status.pendding){errorMsg=errMsg;state=status.rejected;handleReject.call(this);}},then:then,promise:function(){return{then:then}}};return deferred;};function when(){var allCount=arguments.length;var count=0;var deferred=Deferred();var result=[];for(var i=0;i<allCount;i++){var promise=arguments[i];(function(i){promise.then(function(data){count++;result[i]=data;if(count===allCount){deferred.resolve.apply(deferred,result);}},function(){deferred.reject();});})(i);}
return deferred.promise();}

